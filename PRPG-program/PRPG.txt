addi $2, $0, 111	#first register, seed value
addi $1, $0, 8200	#memory address register, will increment by 1
sw $2, ($1)		#store s0
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14


#s2
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s3
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s4
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s5
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s6
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s7
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s2
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s1
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s0
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s11
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s12
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s13
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s14
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14

#s15
mult $2, $2 	#square the seed
mflo $2
andi $0, $2, 15	#bit mask the least significant (goes in r0, amd most significant (r3)
#lui, $1, 15FFF		#lui in this system will perform imm << 4 (not 16, as in MIPS)
#ori $1, $1, 0
andi $3, $2, 61440
#and $3, $2, $1
srl $3, $3, 2		# shift right by 2 bits the MSB's of the squared value stored in $3
or $2, $0, $3	# merge $17 and $3 to get the new 16-bit number, this is seed-i
addi $1, $1, 4	# increment address by one byte
sw $2 ($1)		# store this value in address stored in $14


#average value
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
subi $1, $1, 4
lw $0 ($1)
add $2, $0, $2
#average
srl $2, $2, 4
addi $1, $1, 64
sw $2 ($1)
subi $1, $1, 64


#hamming weight, memory address is back at start
#s0
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s1
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s2
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s3
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s4
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s5
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s6
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s7
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s2
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s1
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s1
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s0
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s11
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s12
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s13
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 68
addi $1, $1, 4

#s14
lw $2 ($1)
addi $0, $0, 0
andi $2, $2, 1	#check bit 0
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 1
andi $2, $2, 1 #check bit 1
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 2
andi $2, $2, 1 #check bit 2
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 3
andi $2, $2, 1 #check bit 3
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 4
andi $2, $2, 1 #check bit 4
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 5
andi $2, $2, 1 #check bit 5
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 6
andi $2, $2, 1 #check bit 6
add $0, $0,$2
lw $2 ($1)
srl $2, $2, 7
andi $2, $2, 1 #check bit 7
add $0, $0,$2

addi $1, $1, 68
sw $0 ($1)
subi $1, $1 4

lw $2 ($1)
add $0, $0, $2 #s15 ham + s14 ham
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4
lw $2 ($1)
add $0, $0, $2
subi $1, $1, 4


#average
srl $0, $0, 4
addi $1, $1, 68
sw $0 ($1)
